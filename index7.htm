<!DOCTYPE html>
<html>
<head>
    <title>Parasitic Combination Inheritance Example</title>
    <script type="text/javascript">
            
        function object(o){
            function F(){}
            F.prototype = o;
            return new F();		//可以在返回的这个新实例中添加自己的属性
        }
    
        function inheritPrototype(subType, superType){
            var prototype = object(superType.prototype);   //创建一个对象
            //下面两行构建起原型链
            prototype.constructor = subType;        //只增加一个属性，用于构建原型链      
            subType.prototype = prototype;                
        }
                                
        function SuperType(name){
            this.name = name;
            this.colors = ["red", "blue", "green"];
        }
        
        SuperType.prototype.sayName = function(){
            alert(this.name);
        };

        function SubType(name, age){  
            //只在实例上创建一次属性
            SuperType.call(this, name);
    		//这个属性也可以移到SuperType中去
            this.age = age;
        }

        //构造原型链
        inheritPrototype(SubType, SuperType);
        
        SubType.prototype.sayAge = function(){
            alert(this.age);
        };
        
        var instance1 = new SubType("Nicholas", 29);
        instance1.colors.push("black");
        alert(instance1.colors);  //"red,blue,green,black"
        instance1.sayName();      //"Nicholas";
        instance1.sayAge();       //29
        
       
        var instance2 = new SubType("Greg", 27);
        alert(instance2.colors);  //"red,blue,green"
        instance2.sayName();      //"Greg";
        instance2.sayAge();       //27
       
        
    </script>
</head>
<body>
</body>
</html>